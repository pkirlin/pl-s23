%!PS-Adobe-3.0
%%Title: pl-lect8-code.rkt
%%For: Phillip Kirlin
%%Creator: a2ps version 4.14
%%CreationDate: Tue Feb 14 12:23:07 2023
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 792 def
/sw 612 def
/llx 24 def
/urx 588 def
/ury 768 def
/lly 24 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 9.000000 def
/cw 5.400000 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 104.400000 mul
def
/ph
   699.300000 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(\(define \(map func lst\)) p n
(  \(if \(null? lst\) '\(\)) N
(    \(cons \(func \(car lst\)\) \(map func \(cdr lst\)\)\)\)\)) N
(    ) N
(\(define \(double x\) \(* x 2\)\)) N
(\(map double '\(1 2 3\)\) => '\(2 4 6\)) N
() N
(\(map \(lambda \(x\) \(* x 2\)\) '\(1 2 3\)\) => '\(2 4 6\)) N
() N
(\(map car '\(\(1 2 3\) \(4 5\) \(6\) \(7 8 9\)\)\) => '\(1 4 6 7\)) N
() N
(\(define \(scale factor lst\)) N
(  \(map \(lambda \(x\) \(* x factor\)\) lst\)) N
(    ) N
(\(scale 2 '\(1 2 3\)\) => '\(2 4 6\)) N
() N
(\(map \(lambda \(x\) \(+ x 1\)\) '\(1 2 3\)\) => ?) N
() N
(\(map \(lambda \(x\) \(cons x '\(\)\) '\(1 2 3\)\) => ?) N
() N
(\(map \(lambda \(x\) \(list x\)\) '\(1 2 3\)\) => ?) N
() N
(\(map \(lambda \(x\)) N
(  \(if \(> x 0\) \(* x 2\) \(* x 3\)\)\) '\(1 -2 -3 4\)\)) N
() N
(\(define \(filter func lst\)) N
(  \(cond \(\(null? lst\) '\(\)) N
(    \(\(func lst\) \(cons \(func \(car lst\)\) \(filter func \(cdr lst\)\)\)\)) N
(    \(#t \(filter func \(cdr lst\)\)\)\)\)) N
(    ) N
(\(filter odd? '\(1 2 3\)\) => '\(1 3\)) N
() N
(\(define \(keep-odds lst\) \(filter odd? lst\)) N
() N
(\(filter \(lambda \(x\) \(> x 0\)\) '\(-1 2 -3 4\)\) => '\(2 4\)) N
() N
(\(filter \(lambda \(x\) \(= 1 \(remainder x 2\)\)\) '\(1 2 3\)\) => ?) N
() N
(\(define \(keep-divisible factor lst\)) N
(  \(filter ______ lst\)\)) N
(  ) N
(\(filter \(lambda \(lst\) \(even? \(car lst\)\)\)) N
(           '\(\(1 2 3\) \(4 5\) \(6 7\)\)\) => ?) N
() N
(\(filter \(lambda \(lst\) \(even? \(car lst\)\)\)) N
(           '\(\(1 2 3\) \(4 5\) \(6 7\) \(\)\)\) => ?) N
() N
(\(define \(keep-longer-than n lst\)) N
(  \(filter ______ lst\)\)) N
() N
() N
() N
(\(define \(square x\) \(expt x 2\)\)) N
(\(define \(cube x\) \(expt x 3\)\)) N
() N
(; a function that returns a function) N
(\(define \(to-the-power exponent\)) N
() S 8 T (\(lambda \(x\) \(expt x exponent\)\)\)) N
() S 8 T () N
(; how to use this new function:) N
(\(define square-new \(to-the-power 2\)\)) N
(\(define cube-new \(to-the-power 3\)\)) N
() N
(; another example) N
(; first, the old way:) N
(\(define \(add3 num\) \(+ 3 num\)\)) N
(\(define \(add17 num\) \(+ 17 num\)\)) N
(; and the new way:) N
(\(define \(create-add-function inc\)) N
(  \(lambda \(num\) \(+ inc num\)\)\)) N
(\(define add3-new \(create-add-function 3\)\)) N
(\(define add17-new \(create-add-function 17\)\)) N
() N
(; a function that takes two functions and returns a function) N
(\(define \(compose f g\)) N
(  \(lambda \(x\) \(f \(g x\)\)\)\)) N
(\(define second \(compose car cdr\)\)) N
(pl-lect8-code.rkt) (Page 1/2) (Sep 21, 17 13:05) title
border
grestore
(Printed by Phillip Kirlin) rhead
() (1/2) (Tuesday February 14, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(\(define third \(compose car \(compose cdr cdr\)\)\)) p n
(;\(map third '\(\(2013 5 6\) \(2012 1 8\) \(2000 7 7\)\)\)) N
() N
(; a function that takes a function and returns a "safe" version of the same function) N
(\(define \(make-safe func\)) N
(  \(lambda \(lst\)) N
(    \(if \(or \(not \(list? lst\)\)) N
(            \(null? lst\)\)) N
(        "No can do!") N
(        \(func lst\)\)\)\)) N
() N
(\(define \(divisible n\)) N
() S 8 T (\(lambda \(x\) \(= 0 \(remainder x n\)\)\)\)) N
() N
(\(define \(make-quad-polynomial a b c\)) N
(   \(lambda \(x\) \(+ \(* a x x\) \(* b x\) c\)\)\)) N
(   ) N
(; Building to foldr) N
(; these three functions are all similar) N
(\(define \(length lst\)) N
(  \(if \(null? lst\) 0) N
(    \(+ 1 \(length \(cdr lst\)\)\)\)\)) N
() N
(\(define \(sum-list lst\)) N
(  \(if \(null? lst\) 0) N
(    \(+ \(car lst\) \(sum-list \(cdr lst\)\)\)\)\)) N
() N
(;\(define \(map func lst\)) N
(;  \(if \(null? lst\) '\(\)) N
(;    \(cons \(func \(car lst\)\) \(map func \(cdr lst\)\)\)\)\)) N
() N
(; resulting in foldr!) N
(\(define \(foldr combine base lst\)) N
(  \(if \(null? lst\) base) N
(    \(combine \(car lst\) \(foldr combine base \(cdr lst\)\)\)\)\)) N
(    ) N
(\(define \(sum-list-new lst\)) N
() S 8 T (\(foldr + 0 lst\)\)) N
() S 8 T () N
(\(define \(length-new lst\)) N
(  \(foldr \(lambda \(elt cdr-len\) \(+ 1 cdr-len\)\) 0 lst\)\)) N
(  ) N
(\(define \(my-map func lst\)) N
(  \(foldr \(lambda \(car cdr\) \(cons \(func car\) cdr\)\) '\(\) lst\)\)) N
(  ) N
() N
(#|) N
(- Write a function make-gt which takes a number n and returns a function of a single) N
(argument x that evalutes to #t if n > x.) N
() N
(  Ex: \(define gt5 \(make-gt 5\)\)) N
(      \(filter gt5 '\(2 4 6 8\)\) ==> '\(6 8\)) N
(      ) N
(- Write a function called make-polynomial that takes a list of coefficients and returns) N
(a function that represents the equivalent polynomial.) N
(  Ex: \(make-polynomial '\(2 1\)\) returns the polynomial 2x + 1, or rather it) N
(          returns the function \(lambda \(x\) \(+ \(* 2 x\) 1\)\)) N
(          ) N
(  Ex: \(make-polynomial '\(2 4 -8\)\) returns the polynomial 2x^2 + 4x - 8) N
(    This should work for a list of any length.  A polynomial for a list of length) N
(    zero is the zero polynomial f\(x\) = 0.) N
(      ) N
(  You should be able to do something like) N
(  \(map \(make-polynomial '\(2 1\)\) '\(1 2 3\)\) ==> '\(3 5 7\)) N
(      ) N
(- Write filter and count \(from the previous lecture\) in terms of foldr.) N
() N
(- Write max in terms of foldr.  You may assume all the numbers you will be comparing) N
(are positive.) N
(|#) S
(pl-lect8-code.rkt) (Page 2/2) (Sep 21, 17 13:05) title
border
grestore
(Printed by Phillip Kirlin) rhead
() (Tuesday February 14, 2023) (2/2) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
