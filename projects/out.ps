%!PS-Adobe-3.0
%%Title: y
%%For: Phillip Kirlin
%%Creator: a2ps version 4.14
%%CreationDate: Tue Apr 18 13:52:07 2023
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 7
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 792 def
/sw 612 def
/llx 24 def
/urx 588 def
/ury 768 def
/lly 24 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 8.000000 def
/cw 4.800000 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 117.400000 mul
def
/ph
   693.600000 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(package bank2;) p n
() N
(// This example has a race condition -- you have a very good chance of losing money.) N
(// To fix it, you must ensure that only one thread at a time can deposit/withdraw money.) N
(// One of two ways to ensure this:) N
() N
(// Option A: declare the deposit & withdraw methods as "synchronized."  This forces whatever) N
(//           thread calls deposit or withdraw to own the object's lock before running the ) N
(//           deposit or withdraw code.) N
() N
(// Option B: put a "synchronized \(acc\)" block around the acc.deposit\(1\) line inside of run\(\).) N
(//           This will have the exact same effect as option A, because it forces the thread ) N
(//           that calls deposit to own the lock for the bank account object.) N
() N
(class BankAccount {) N
() N
() S 8 T (private int balance = 0;) N
() N
() S 8 T (public void deposit\(int x\) {) N
() S 8 T () S 16 T (balance += x;) N
() S 8 T (}) N
() N
() S 8 T (public void withdraw\(int x\) {) N
() S 8 T () S 16 T (if \(balance >= x\) {) N
() S 8 T () S 16 T () S 24 T (balance -= x;) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T (public int getBalance\(\) {) N
() S 8 T () S 16 T (return balance;) N
() S 8 T (}) N
(}) N
() N
(class DepositorThread extends Thread {) N
() N
() S 8 T (private BankAccount acc;) N
() N
() S 8 T (public DepositorThread\(BankAccount acc\) {) N
() S 8 T () S 16 T (this.acc = acc;) N
() S 8 T (}) N
() N
() S 8 T (public void run\(\) {) N
() S 8 T () S 16 T (for \(int x = 0; x < 1000; x++\) {) N
() S 8 T () S 16 T () S 24 T (acc.deposit\(1\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (System.out.println\("done"\);) N
() S 8 T (}) N
(}) N
() N
(public class Race {) N
() N
() S 8 T (public static void main\(String args[]\) throws InterruptedException {) N
() N
() S 8 T () S 16 T (BankAccount acc = new BankAccount\(\);) N
() N
() S 8 T () S 16 T (for \(int x = 0; x < 5; x++\) {) N
() S 8 T () S 16 T () S 24 T (DepositorThread i = new DepositorThread\(acc\);) N
() S 8 T () S 16 T () S 24 T (i.start\(\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T (Thread.sleep\(1000\); // hack: wait for all the threads to finish) N
() S 8 T () S 16 T (System.out.println\("Account has " + acc.getBalance\(\)\); // should have $5000) N
() S 8 T (}) N
(}) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(y) (Page 1/7) (Apr 18, 23 13:52) title
border
grestore
(Printed by Phillip Kirlin) rhead
() (1/7) (Tuesday April 18, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(===========================) N
(package philosophers;) N
() N
(class Fork {}) N
() N
(class Philosopher extends Thread) N
({) N
() S 8 T (private Fork left, right;) N
() S 8 T () N
() S 8 T (public Philosopher\(Fork l, Fork r\)) N
() S 8 T ({) N
() S 8 T () S 16 T (left = l; right = r;) N
() S 8 T (}) N
() S 8 T () N
() S 8 T (public void run\(\)) N
() S 8 T ({) N
() S 8 T () S 16 T (synchronized \(left\)) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (System.out.println\(Thread.currentThread\(\) + " takes left fork."\);) N
() S 8 T () S 16 T () S 24 T (try { Thread.sleep\(1000\);  } catch \(InterruptedException e\) {}) N
() S 8 T () S 16 T () S 24 T (synchronized \(right\)) N
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (System.out.println\(Thread.currentThread\(\) + " takes right fork and eats."\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (try { Thread.sleep\(1000\);  } catch \(InterruptedException e\) {}) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
() N
(public class Philosophers {) N
() S 8 T (public static void main\(String args[]\)) N
() S 8 T ({) N
() S 8 T () S 16 T (Fork f1 = new Fork\(\), f2 = new Fork\(\), f3 = new Fork\(\), f4 = new Fork\(\), f5 = new Fork\(\);) N
() S 8 T () S 16 T (Philosopher p1 = new Philosopher\(f1, f2\);) N
() S 8 T () S 16 T (Philosopher p2 = new Philosopher\(f2, f3\);) N
() S 8 T () S 16 T (Philosopher p3 = new Philosopher\(f3, f4\);) N
() S 8 T () S 16 T (Philosopher p4 = new Philosopher\(f4, f5\);) N
() S 8 T () S 16 T (Philosopher p5 = new Philosopher\(f5, f1\);) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T (p1.start\(\);) N
() S 8 T () S 16 T (p2.start\(\);) N
() S 8 T () S 16 T (p3.start\(\);) N
() S 8 T () S 16 T (p4.start\(\);) N
() S 8 T () S 16 T (p5.start\(\);) N
() S 8 T () S 16 T () N
() S 8 T (}) N
(}) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(y) (Page 2/7) (Apr 18, 23 13:52) title
border
grestore
(Printed by Phillip Kirlin) rhead
() (Tuesday April 18, 2023) (2/7) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(=======================) p n
(// Chef and waiter operate concurrently without) N
(// any communication.) N
() N
(package restaurant;) N
() N
(class PickupArea) N
({) N
() S 8 T (// note: bad data hiding!) N
() S 8 T (// orderNumbers are positive, or 0 for no order waiting) N
() S 8 T (public int orderNumber;) N
(}) N
() N
(class Chef extends Thread {) N
() S 8 T (private final PickupArea pickupArea;) N
() S 8 T () N
() S 8 T (public Chef\(PickupArea a\) { this.pickupArea = a; }) N
() N
() S 8 T (public void run\(\) {) N
() S 8 T () S 16 T (for \(int orderNum = 1; orderNum <= 10; orderNum++\) {) N
() S 8 T () S 16 T () S 24 T (try { // simulate time to cook) N
() S 8 T () S 16 T () S 24 T () S 32 T (Thread.sleep\(\(int\) \(Math.random\(\) * 1000\)\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (catch \(InterruptedException e\) {}) N
() S 8 T () S 16 T () S 24 T (System.out.println\("Cooked order #" + orderNum\);) N
() S 8 T () S 16 T () S 24 T (pickupArea.orderNumber = orderNum;) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
(class Waiter extends Thread {) N
() S 8 T (private final PickupArea pickupArea;) N
() S 8 T () N
() S 8 T (public Waiter\(PickupArea a\) { this.pickupArea = a; }) N
() N
() S 8 T (public void run\(\) {) N
() S 8 T () S 16 T (for \(int orderNum = 1; orderNum <= 10; orderNum++\) {) N
() S 8 T () S 16 T () S 24 T (// retrieve an order) N
() S 8 T () S 16 T () S 24 T (int order = pickupArea.orderNumber;) N
() S 8 T () S 16 T () S 24 T (// reset the pickup area) N
() S 8 T () S 16 T () S 24 T (pickupArea.orderNumber = 0;) N
() S 8 T () S 16 T () S 24 T (// serve food) N
() S 8 T () S 16 T () S 24 T (System.out.println\("Served order #" + order\);) N
() S 8 T () S 16 T () S 24 T (try { // simulate time to serve) N
() S 8 T () S 16 T () S 24 T () S 32 T (Thread.sleep\(\(int\) \(Math.random\(\) * 1000\)\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (catch \(InterruptedException e\) {}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
(public class Restaurant {) N
() S 8 T (public static void main\(String args[]\)) N
() S 8 T ({) N
() S 8 T () S 16 T (PickupArea area = new PickupArea\(\);) N
() S 8 T () S 16 T (Chef chef = new Chef\(area\);) N
() S 8 T () S 16 T (chef.start\(\);) N
() S 8 T () S 16 T (Waiter waiter = new Waiter\(area\);) N
() S 8 T () S 16 T (waiter.start\(\);) N
() S 8 T (}) N
(}) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(y) (Page 3/7) (Apr 18, 23 13:52) title
border
grestore
(Printed by Phillip Kirlin) rhead
() (3/7) (Tuesday April 18, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(========================) p n
(// busy waits -- deadlock because one thread hogs) N
(// the scheduler and never switches to the other thread.) N
(package restaurant15;) N
() N
(class PickupArea) N
({) N
() S 8 T (// note: bad data hiding!) N
() S 8 T (// orderNumbers are positive, or 0 for no order waiting) N
() S 8 T (public int orderNumber;) N
(}) N
() N
(class Chef extends Thread {) N
() S 8 T (private final PickupArea pickupArea;) N
() S 8 T () N
() S 8 T (public Chef\(PickupArea a\) { this.pickupArea = a; }) N
() N
() S 8 T (public void run\(\) {) N
() S 8 T () S 16 T (for \(int orderNum = 1; orderNum <= 10; orderNum++\) {) N
() S 8 T () S 16 T () S 24 T (try { // simulate time to cook) N
() S 8 T () S 16 T () S 24 T () S 32 T (Thread.sleep\(\(int\) \(Math.random\(\) * 1000\)\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (catch \(InterruptedException e\) {}) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T (// wait until the pickup area is available \(has no order in it\)) N
() S 8 T () S 16 T () S 24 T (while \(pickupArea.orderNumber > 0\) { }  ) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T (synchronized \(pickupArea\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T (System.out.println\("Cooked order #" + orderNum\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (pickupArea.orderNumber = orderNum;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
(class Waiter extends Thread {) N
() S 8 T (private final PickupArea pickupArea;) N
() S 8 T () N
() S 8 T (public Waiter\(PickupArea a\) { this.pickupArea = a; }) N
() N
() S 8 T (public void run\(\) {) N
() S 8 T () S 16 T (for \(int orderNum = 1; orderNum <= 10; orderNum++\) {) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T (// wait until there is food in the pickup area) N
() S 8 T () S 16 T () S 24 T (while \(pickupArea.orderNumber == 0\) { }) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T (synchronized \(pickupArea\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T (// retrieve an order) N
() S 8 T () S 16 T () S 24 T () S 32 T (int order = pickupArea.orderNumber;) N
() S 8 T () S 16 T () S 24 T () S 32 T (// reset the pickup area) N
() S 8 T () S 16 T () S 24 T () S 32 T (pickupArea.orderNumber = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () N
() S 8 T () S 16 T () S 24 T () S 32 T (// serve food) N
() S 8 T () S 16 T () S 24 T () S 32 T (System.out.println\("Served order #" + order\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T (try { // simulate time to serve) N
() S 8 T () S 16 T () S 24 T () S 32 T (Thread.sleep\(\(int\) \(Math.random\(\) * 1000\)\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (catch \(InterruptedException e\) {}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
(public class Restaurant {) N
() S 8 T (public static void main\(String args[]\)) N
() S 8 T ({) N
() S 8 T () S 16 T (PickupArea area = new PickupArea\(\);) N
() S 8 T () S 16 T (Chef chef = new Chef\(area\);) N
() S 8 T () S 16 T (chef.start\(\);) N
() S 8 T () S 16 T (Waiter waiter = new Waiter\(area\);) N
() S 8 T () S 16 T (waiter.start\(\);) N
() S 8 T (}) N
(}) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(y) (Page 4/7) (Apr 18, 23 13:52) title
border
grestore
(Printed by Phillip Kirlin) rhead
() (Tuesday April 18, 2023) (4/7) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 5
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(=========================) p n
(// Restaurant 2: One chef, one waiter, correctly synched.) N
() N
(package restaurant2;) N
() N
(class PickupArea) N
({) N
() S 8 T (// note: bad data hiding!) N
() S 8 T (// orderNumbers are positive, or 0 for no order waiting) N
() S 8 T (public int orderNumber = 0;) N
(}) N
() N
(class Chef extends Thread {) N
() S 8 T (private final PickupArea pickupArea;) N
() S 8 T () N
() S 8 T (public Chef\(PickupArea a\) { this.pickupArea = a; }) N
() N
() S 8 T (public void run\(\) {) N
() S 8 T () S 16 T (for \(int orderNum = 1; orderNum <= 10; orderNum++\) {) N
() S 8 T () S 16 T () S 24 T (try { ) N
() S 8 T () S 16 T () S 24 T () S 32 T (// simulate time to cook) N
() S 8 T () S 16 T () S 24 T () S 32 T (Thread.sleep\(\(int\) \(Math.random\(\) * 1000\)\);) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (synchronized \(pickupArea\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// wait until the pickup area is free) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (while \(pickupArea.orderNumber > 0\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (System.out.println\("Chef: is waiting"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (pickupArea.wait\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (System.out.println\("Chef: woke up"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// we are now guaranteed that the pickup area is empty.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// since we own the pickup area's lock, nobody could have) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// changed it between the end of the wait\(\) above and here.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// put the food in the pickup area.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (pickupArea.orderNumber = orderNum;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Chef: Sent out order #" + orderNum\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// signal the waiter to come get it) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (pickupArea.notifyAll\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Chef: Waiter notified of order #" + orderNum\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T (} catch \(InterruptedException e\) {) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
(class Waiter extends Thread {) N
() S 8 T (private final PickupArea pickupArea;) N
() S 8 T () N
() S 8 T (public Waiter\(PickupArea a\) { this.pickupArea = a; }) N
() N
() S 8 T (public void run\(\) {) N
() S 8 T () S 16 T (for \(int orderNum = 1; orderNum <= 10; orderNum++\) {) N
() S 8 T () S 16 T () S 24 T (try {) N
() S 8 T () S 16 T () S 24 T () S 32 T (int order;) N
() S 8 T () S 16 T () S 24 T () S 32 T (synchronized \(pickupArea\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// wait until the pickup area has food) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (while \(pickupArea.orderNumber == 0\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (System.out.println\("Waiter: is waiting"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (pickupArea.wait\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (System.out.println\("Waiter: woke up"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// we are now guaranteed that the pickup area has food.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// since we own the pickup area's lock, nobody could have) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// changed it between the end of the wait\(\) above and here.) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// get the food in the pickup area and clear the area.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (order = pickupArea.orderNumber;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (pickupArea.orderNumber = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Waiter: Picked up order #" + order\);) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// signal the chef that the pickup area is free.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (pickupArea.notifyAll\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Waiter: Notified chef of open pickup area."\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (// simulate time to serve the food) N
() S 8 T () S 16 T () S 24 T () S 32 T (Thread.sleep\(\(int\) \(Math.random\(\) * 1000\)\);) N
() S 8 T () S 16 T () S 24 T (} catch \(InterruptedException e\) {}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
(public class Restaurant {) N
(y) (Page 5/7) (Apr 18, 23 13:52) title
border
grestore
(Printed by Phillip Kirlin) rhead
() (5/7) (Tuesday April 18, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (6) 6
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (public static void main\(String args[]\)) N
() S 8 T ({) N
() S 8 T () S 16 T (PickupArea area = new PickupArea\(\);) N
() S 8 T () S 16 T (Chef chef = new Chef\(area\);) N
() S 8 T () S 16 T (chef.start\(\);) N
() S 8 T () S 16 T (Waiter waiter = new Waiter\(area\);) N
() S 8 T () S 16 T (waiter.start\(\);) N
() S 8 T (}) N
(}) N
() N
(=============) N
(// Restaurant 3: One chef, two waiters, correctly synched.) N
() N
(package restaurant3;) N
() N
(class PickupArea) N
({) N
() S 8 T (// note: bad data hiding!) N
() S 8 T (// orderNumbers are positive, or 0 for no order waiting) N
() S 8 T (public int orderNumber = 0;) N
(}) N
() N
(class Chef extends Thread {) N
() S 8 T (private final PickupArea pickupArea;) N
() S 8 T () N
() S 8 T (public Chef\(PickupArea a\) { this.pickupArea = a; }) N
() N
() S 8 T (public void run\(\) {) N
() S 8 T () S 16 T (for \(int orderNum = 1; orderNum <= 10; orderNum++\) {) N
() S 8 T () S 16 T () S 24 T (try { ) N
() S 8 T () S 16 T () S 24 T () S 32 T (// simulate time to cook) N
() S 8 T () S 16 T () S 24 T () S 32 T (Thread.sleep\(\(int\) \(Math.random\(\) * 1000\)\);) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (synchronized \(pickupArea\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// wait until the pickup area is free) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (while \(pickupArea.orderNumber > 0\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (System.out.println\("Chef: is waiting"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (pickupArea.wait\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (System.out.println\("Chef: woke up"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// we are now guaranteed that the pickup area is empty.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// since we own the pickup area's lock, nobody could have) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// changed it between the end of the wait\(\) above and here.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// put the food in the pickup area.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (pickupArea.orderNumber = orderNum;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Chef: Sent out order #" + orderNum\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// signal the waiter to come get it) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (pickupArea.notifyAll\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Chef: Waiter notified of order #" + orderNum\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T (} catch \(InterruptedException e\) {) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T (// end of day: close restaurant) N
() S 8 T () S 16 T (synchronized \(pickupArea\) {) N
() S 8 T () S 16 T () S 24 T (try {) N
() S 8 T () S 16 T () S 24 T () S 32 T (// wait until the pickup area is free) N
() S 8 T () S 16 T () S 24 T () S 32 T (while \(pickupArea.orderNumber > 0\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Chef: is waiting"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (pickupArea.wait\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Chef: woke up"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (// we are now guaranteed that the pickup area is empty.) N
() S 8 T () S 16 T () S 24 T () S 32 T (// since we own the pickup area's lock, nobody could have) N
() S 8 T () S 16 T () S 24 T () S 32 T (// changed it between the end of the wait\(\) above and here.) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (// put "close restaurant" order in.) N
() S 8 T () S 16 T () S 24 T () S 32 T (pickupArea.orderNumber = -1;) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (// signal the waiters) N
() S 8 T () S 16 T () S 24 T () S 32 T (pickupArea.notifyAll\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (System.out.println\("Chef: Waiters notified of closing"\);) N
() S 8 T () S 16 T () S 24 T (} catch \(InterruptedException e\) {) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
(class Waiter extends Thread {) N
() S 8 T (private final PickupArea pickupArea;) N
() S 8 T (private final int waiterNumber;) N
() S 8 T () N
() S 8 T (public Waiter\(int n, PickupArea a\) { ) N
(y) (Page 6/7) (Apr 18, 23 13:52) title
border
grestore
(Printed by Phillip Kirlin) rhead
() (Tuesday April 18, 2023) (6/7) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 7
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (this.pickupArea = a; this.waiterNumber = n; }) N
() N
() S 8 T (public void run\(\) {) N
() S 8 T () S 16 T (while \(true\) {) N
() S 8 T () S 16 T () S 24 T (try {) N
() S 8 T () S 16 T () S 24 T () S 32 T (int orderNum;) N
() S 8 T () S 16 T () S 24 T () S 32 T (synchronized \(pickupArea\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// wait until the pickup area has food) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (while \(pickupArea.orderNumber == 0\) {) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (System.out.println\("Waiter" + waiterNumber + ": is waiting"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (pickupArea.wait\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (System.out.println\("Waiter" + waiterNumber + ": woke up"\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// we are now guaranteed that the pickup area has food.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// since we own the pickup area's lock, nobody could have) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// changed it between the end of the wait\(\) above and here.) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// get the food in the pickup area and clear the area.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (orderNum = pickupArea.orderNumber;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// restaurant closing!) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (if \(orderNum == -1\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (break;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (pickupArea.orderNumber = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Waiter" + waiterNumber + ": Picked up order #" + ) N
(orderNum\);) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (// signal the chef that the pickup area is free.) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (pickupArea.notifyAll\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (System.out.println\("Waiter" + waiterNumber + ": Notified chef of open ) N
(pickup area."\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (// simulate time to serve the food) N
() S 8 T () S 16 T () S 24 T () S 32 T (Thread.sleep\(\(int\) \(Math.random\(\) * 1000\)\);) N
() S 8 T () S 16 T () S 24 T (} catch \(InterruptedException e\) {}) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (System.out.println\("Waiter" + waiterNumber + ": Leaving work."\);) N
() S 8 T (}) N
(}) N
() N
(public class Restaurant {) N
() S 8 T (public static void main\(String args[]\)) N
() S 8 T ({) N
() S 8 T () S 16 T (PickupArea area = new PickupArea\(\);) N
() S 8 T () S 16 T (Chef chef = new Chef\(area\);) N
() S 8 T () S 16 T (chef.start\(\);) N
() S 8 T () S 16 T (Waiter waiter1 = new Waiter\(1, area\);) N
() S 8 T () S 16 T (waiter1.start\(\);) N
() S 8 T () S 16 T (Waiter waiter2 = new Waiter\(2, area\);) N
() S 8 T () S 16 T (waiter2.start\(\);) N
() S 8 T (}) N
(}) N
(y) (Page 7/7) (Apr 18, 23 13:52) title
border
grestore
(Printed by Phillip Kirlin) rhead
() (7/7) (Tuesday April 18, 2023) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
